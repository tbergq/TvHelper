# @generated SignedSource<<0f07f17dea5d55bdae9eeb75734e549f>>

# <BREAKING-CHANGES-LOG>
# </BREAKING-CHANGES-LOG>

schema {
  query: RootQuery
  mutation: RootMutation
}

type AddFavorite {
  success: Boolean
  tvShow: TvShowNode
}

type Cast {
  character: Person

  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  person: Person
}

type CreateStoredOperation {
  createdOperations: [StoredOperation]
}

type CreateTrainingJournalUser {
  email: String

  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  username: String
}

type CreateUserMutation {
  success: Boolean
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format
outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""Episodes of the tv show"""
type Episode {
  airdate: Date

  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  image: TvHelperImage
  name: String
  number: Int
  season: Int

  """Gives season and episode number on format S01E01"""
  seasonAndNumber: String
  summary(stripTags: Boolean = true): String
  watched: Boolean
}

type EpisodeWatched {
  episode: Episode
  success: Boolean
}

type Exericse {
  description: String

  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  muscleGroups: String
  name: String
  videoUrl: String
}

"""A connection to a list of items."""
type ExericseConnection {
  """A list of edges."""
  edges: [ExericseEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type ExericseEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Exericse
}

type LoginType {
  success: Boolean
  token: String
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

type Person {
  id: ID
  image: TvHelperImage
  name: String
}

type RangeDelete {
  id: ID
  success: Boolean
}

"""Root Mutation."""
type RootMutation {
  """Add tv show to favorite list"""
  addFavorite(serieId: ID!): AddFavorite
  createdStoredOperations(storedOperations: [StoredOperationInput!]!): CreateStoredOperation

  """Create a user for trainingjournal application"""
  createTrainingjournalUser(email: String!, password: String!, username: String!): CreateTrainingJournalUser
  createUser(email: String!, password: String!, username: String!): CreateUserMutation

  """Remove tv show from favorite list"""
  deleteFavorite(serieId: ID!): RangeDelete

  """Delete an episode as watched"""
  deleteWatchedEpisode(episodeId: ID!): EpisodeWatched

  """Mark an episode as watched"""
  markAsWatched(episodeId: ID!): EpisodeWatched

  """Login to trainingjournal application"""
  trainingJournalLogin(password: String!, username: String!): LoginType
  tvHelperLogin(password: String!, username: String!): LoginType
}

"""Root Query"""
type RootQuery {
  """Load episode by id"""
  episode(id: ID!): Episode

  """Get your favorites"""
  favorites(after: String, before: String, first: Int, last: Int, options: SortOptions = {sortBy: NAME, sortDirection: ASC}): TvShowConnection

  """Search for tv shows by name"""
  searchTvShow(after: String, before: String, first: Int, last: Int, query: String!): TvShowConnection

  """Tv show lookup by id"""
  tvShowDetail(id: ID!): TvShow

  """User context"""
  viewer: Viewer
}

enum SortBy {
  NAME
  NEXT_EPISODE
  PREVIOUS_EPISODE
  STATUS
}

enum SortDirection {
  ASC
  DESC
}

input SortOptions {
  sortBy: SortBy = NAME
  sortDirection: SortDirection = ASC
}

type StoredOperation {
  operationId: String
  text: String
}

input StoredOperationInput {
  operationId: String!
  text: String!
}

type TraningJournalViewer {
  exercises(after: String, before: String, first: Int, last: Int): ExericseConnection

  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  username: String
}

type TvHelperImage {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  medium: String
  original: String
}

type TvShow {
  cast: [Cast]
  episodes: [Episode]

  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  image: TvHelperImage
  isFavorite: Boolean
  name: String
  nextEpisode: Date
  premiered: Date
  previousEpisode: Date
  rating: Float
  status: String
  summary(stripTags: Boolean = true): String
}

"""A connection to a list of items."""
type TvShowConnection {
  """A list of edges."""
  edges: [TvShowEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type TvShowEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: TvShow
}

type TvShowNode {
  node: TvShow
}

type Unauthorized {
  message: String
}

union Viewer = TraningJournalViewer | Unauthorized
