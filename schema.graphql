# @generated SignedSource<<2de2b7ff3e0df3b1e80f66f1031dad11>>

# <BREAKING-CHANGES-LOG>
#  TYPE_REMOVED: ExericseConnection was removed.
#  TYPE_REMOVED: ExericseEdge was removed.
#  TYPE_REMOVED: Exericse was removed.
#  FIELD_CHANGED_KIND: TraningJournalViewer.exercises changed type from ExericseConnection to ExerciseConnection.
#  FIELD_CHANGED_KIND: RootMutation.createExercise changed type from ExericseEdge to ExerciseEdge.
#  FIELD_CHANGED_KIND: RootMutation.createExercise changed type from ExerciseEdge to CreateExercise.
# </BREAKING-CHANGES-LOG>

schema {
  query: RootQuery
  mutation: RootMutation
}

"""The return type for the add favorite mutation"""
type AddFavorite {
  success: Boolean
  tvShow: TvShowNode
}

"""A character appearing in a tvshow, and the actor/actress"""
type Cast {
  character: Person

  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  person: Person
}

"""Response type indicating an error"""
type ChangePasswordError implements Error {
  isInvalidPassword: Boolean
  message: String
}

union ChangePasswordOrError = ChangePasswordError | ChangePasswordResponse

"""Response indicating that the password was changed"""
type ChangePasswordResponse {
  success: Boolean
}

"""The return type for create exercise mutation"""
type CreateExercise {
  exerciseEdge: ExerciseEdge
}

input CreateExerciseInput {
  description: String
  muscleGroups: String
  name: String!
  videoUrl: String
}

"""A newly created program"""
type CreateProgram {
  programEdge: ProgramEdge
}

input CreateProgramInput {
  name: String!
}

"""A stored operation, a has with a corresponding graphql operation"""
type CreateStoredOperation {
  createdOperations: [StoredOperation]
}

"""Return type for the create user mutation"""
type CreateTrainingJournalUser {
  email: String

  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  username: String
}

"""The reply for a newly created user"""
type CreateUserMutation {
  success: Boolean
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format
outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""Response type for delete episode mutation"""
type DeletedEpisode {
  exerciseId: ID
  success: Boolean
}

"""Episodes of the tv show"""
type Episode {
  airdate: Date

  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  image: TvHelperImage
  name: String
  number: Int
  season: Int

  """Gives season and episode number on format S01E01"""
  seasonAndNumber: String
  summary(stripTags: Boolean = true): String
  watched: Boolean
}

"""Mutation response type for episode watched mutation"""
type EpisodeWatched {
  episode: Episode
  success: Boolean
}

"""Interface to describe an error"""
interface Error {
  message: String
}

"""An exercise in the trainingjournal app"""
type Exercise {
  description: String

  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  muscleGroups: String
  name: String
  videoUrl: String
}

"""A connection to a list of items."""
type ExerciseConnection {
  """A list of edges."""
  edges: [ExerciseEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type ExerciseEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Exercise
}

"""Login response, indicates success and gives the token"""
type LoginType {
  success: Boolean
  token: String
}

"""The network hosting a tv show"""
type Network {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  name: String
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""An actor or a character in a tv show"""
type Person {
  id: ID
  image: TvHelperImage
  name: String
}

"""A trainingjournal program"""
type Program {
  date: Date

  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  name: String
}

"""A connection to a list of items."""
type ProgramConnection {
  """A list of edges."""
  edges: [ProgramEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type ProgramEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Program
}

"""Return type used for range delete mutations"""
type RangeDelete {
  id: ID
  success: Boolean
}

"""Root Mutation."""
type RootMutation {
  """Add tv show to favorite list"""
  addFavorite(serieId: ID!): AddFavorite
  createdStoredOperations(storedOperations: [StoredOperationInput!]!): CreateStoredOperation

  """Create a new Exercise"""
  createExercise(exercise: CreateExerciseInput!): CreateExercise

  """Create a new program"""
  createProgram(program: CreateProgramInput!): CreateProgram

  """Create a user for trainingjournal application"""
  createTrainingjournalUser(email: String!, password: String!, username: String!): CreateTrainingJournalUser
  createUser(email: String!, password: String!, username: String!): CreateUserMutation

  """Delete an Exercise"""
  deleteExercise(id: ID!): DeletedEpisode

  """Remove tv show from favorite list"""
  deleteFavorite(serieId: ID!): RangeDelete

  """Delete an episode as watched"""
  deleteWatchedEpisode(episodeId: ID!): EpisodeWatched

  """Edits an Exercise"""
  editExercise(exercise: CreateExerciseInput!, exerciseId: ID!): CreateExercise

  """Mark an episode as watched"""
  markAsWatched(episodeId: ID!): EpisodeWatched

  """Login to trainingjournal application"""
  trainingJournalLogin(password: String!, username: String!): LoginType
  tvHelperLogin(password: String!, username: String!): LoginType
  tvhHelperChangePassword(newPassword: String!, password: String!, username: String!): ChangePasswordOrError
}

"""Root Query"""
type RootQuery {
  """Load episode by id"""
  episode(id: ID!): Episode

  """Get your favorites"""
  favorites(after: String, before: String, first: Int, last: Int, options: SortOptions = {sortBy: NAME, sortDirection: ASC}): TvShowConnection

  """Search for tv shows by name"""
  searchTvShow(after: String, before: String, first: Int, last: Int, query: String!): TvShowConnection

  """Tv show lookup by id"""
  tvShowDetail(id: ID!): TvShow

  """User context"""
  viewer: Viewer
}

enum SortBy {
  NAME
  NEXT_EPISODE
  PREVIOUS_EPISODE
  STATUS
}

enum SortDirection {
  ASC
  DESC
}

input SortOptions {
  sortBy: SortBy = NAME
  sortDirection: SortDirection = ASC
}

"""A stored operation, a has with a corresponding graphql operation"""
type StoredOperation {
  operationId: String
  text: String
}

input StoredOperationInput {
  operationId: String!
  text: String!
}

"""
The viewer object for the current logged in user in TrainingJournal app
"""
type TraningJournalViewer {
  exercises(after: String, before: String, first: Int, last: Int): ExerciseConnection

  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  programs(after: String, before: String, first: Int, last: Int): ProgramConnection
  username: String
}

"""The image of a person or tvshow or episode"""
type TvHelperImage {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  medium: String
  original: String
}

"""The viewer object for the current logged in user in tvhelper app"""
type TvHelperViewer {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  username: String
}

"""Information about a tv show"""
type TvShow {
  cast: [Cast]
  episodes: [Episode]

  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  image: TvHelperImage
  isFavorite: Boolean
  name: String
  network: Network
  nextEpisode: Date
  premiered: Date
  previousEpisode: Date
  rating: Float
  status: String
  summary(stripTags: Boolean = true): String
}

"""A connection to a list of items."""
type TvShowConnection {
  """A list of edges."""
  edges: [TvShowEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type TvShowEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: TvShow
}

"""A tv show node"""
type TvShowNode {
  node: TvShow
}

"""User is not authorized to view content"""
type Unauthorized {
  message: String
}

union Viewer = TraningJournalViewer | TvHelperViewer | Unauthorized
